
在国际化中，时区、语言、火币。这三个是很切实的问题。

一、时区。
    时间戳：时间不分东西南北、在地球的每一个角落都是相同的。时间戳(Unix时间)（格林威治时间）
    时区会影响date(),但不会影响time()

    如何设置时区：
        1、在php.ini里，设置date.timezone = "Asia/Shanghai"，重启环境就ok了。
        2、date_default_timezone_set("PRC");         //建议在index.php,【成功返回true，失败返回false。检验值。仅影响当前应用】
        3、ini_set('date.timezone','Asia/Shanghai'); //建议在index.php【成功返回旧值，失败false .但是这里的成功失败是针对{保存}这个操作，不检验值是否正确。且它的影响是整个php】
        注意：1、这里【PRC】、【Asia/Shanghai】和【Asia/Chongqing】都指向时区：东八区.PRC指的是中华人民共和国简称
              2、UTC是通用协调时间，UTC表示第0时区，+1表示东1区。
              3、据说Asia/Chongqing有问题。不建议使用
    最终建议：根据服务器IP(国际化应该会分开部署吧)设置对应的时区。date_default_timezone_set("Asia/Shanghai")


二、语言。
    中文、英文、法文、汉语、日语。等等切换很正常

    建议：1、切换开关。自动切换语言，放在php端。手动切换语言，放在html端。都只是改变一个cookie。前后台共享一个cookie值。
          2、语言文件。建议语言文件全部放在html端。
          3、php中提示性语言的国际化。全部先定义好一个英文字符串。前端接收字符串，进行转化输出。layer.msg(L("__I_AM_LANG__"))
          4、一种语言一个字典文件。当新加某句话，需要在每个文件中加入对应语言。（一种语言一个文件，在于把文件小化，同时看着更简洁）


三、货币。
    货币。最麻烦。因为这个同时出现在[数据库][php端][html端]。而且还多义化,比如[rmb][￥][cny][元][人民币]
    建议:
     1、数据库：一律使用ISO【国际标准化组织】的编码：cny.
        php端也同数据库端。
        html端。var  currency = {cny:{c_1:'rmb',c_2:'￥',c_3:'cny',c_4:'元',c_5:'人民币'}}; return currency['cny']['c_4'] = "元"
     2、不建议在代码中设置常量来定义货币。除非整个项目只使用种货币(这个情况全代码可以忽略货币)。
        其实货币在后台也用的很少。只要支付的时候需要严格区别。
     3、杜绝同个单位出来两种货币。比如一个店铺，既有美元又有人民币。这个会涉及汇率问题。汇率是变动的，不好整

